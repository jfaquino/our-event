---
import Date from "@/components/Date.astro";
import HeartIcon from "@/assets/icons/HeartIcon.astro";
import { EVENT_TIMESTAMP } from "@/consts/constant";
import Flowers from "@/assets/images/flowers.webp";
import GoldenCircle from "@/assets/images/golden-circle.svg";
import { Image } from "astro:assets";
---

<section class="relative bg-secondary shadow-box pb-[100px] pt-[70px] px-3">
   <div class="w-full select-none" data-date={EVENT_TIMESTAMP} role="timer">
      <div class="w-full flex justify-center">
         <div
            class="relative w-full max-w-[250px] aspect-square shadow-circle rounded-full
                  flex flex-col items-center justify-center bg-primary p-2 gap-2"
         >
            <Image
               class="w-full absolute scale-125 pointer-events-none"
               src={GoldenCircle}
               alt="golden circle"
            />

            <Image
               class="w-full max-w-[250px] absolute -bottom-[60px] -left-[55px] pointer-events-none"
               src={Flowers}
               alt="flowers"
            />

            <span class="text-3xl font-semibold text-secondary mb-1">
               Faltan
            </span>

            <div class="grid grid-cols-4 text-center uppercase text-secondary">
               <div
                  class="flex flex-col border-r-[1px] border-secondary px-1 gap-1"
               >
                  <Date
                     dateType="D√≠as"
                     attribute={{ "data-days": "" }}
                     className="text-3xl text-accent "
                     wrapperClassName=""
                     height={"h-[2rem]"}
                     max={200}
                  />
               </div>
               <div
                  class="flex flex-col border-r-[1px] border-secondary px-1 gap-1"
               >
                  <Date
                     wrapperClassName=""
                     dateType="HS"
                     attribute={{ "data-hours": "" }}
                     className="text-3xl text-accent"
                     height={"h-[2rem]"}
                     max={23}
                  />
               </div>
               <div
                  class="flex flex-col border-r-[1px] border-secondary px-1 gap-1"
               >
                  <Date
                     wrapperClassName=""
                     dateType="Min"
                     attribute={{ "data-minutes": "" }}
                     className="text-3xl text-accent"
                     height={"h-[2rem]"}
                     max={59}
                  />
               </div>
               <div class="flex flex-col px-1 gap-1">
                  <Date
                     wrapperClassName=""
                     dateType="Seg"
                     attribute={{ "data-seconds": "" }}
                     className="text-3xl text-accent"
                     height={"h-[2rem]"}
                     max={59}
                  />
               </div>
            </div>
         </div>
      </div>
   </div>

   <div class="text-center mt-14">
      <div class="w-full flex justify-center py-5">
         <HeartIcon
            className="h-28 w-28 text-accent rounded-full bg-primary-bg shadow-circle "
         />
      </div>

      <p class="px-7 text-balance">
         Acomp√°√±anos en el d√≠a m√°s especial
         <br />
         <span class="font-cursive text-accent text-3xl tracking-wide"
            >de nuestras vidas</span
         >
      </p>
   </div>
</section>

<script>
   import createCountdown from "@/lib/countdown";
   import { $ } from "@/lib/dom-selector";

   function initCountdown() {
      const $countdown = $("[data-date]");

      if (!$countdown) return;

      const $days = {
         firstDigit: $("[data-days] [data-first-group]", $countdown),
         secondDigit: $("[data-days] [data-second-group]", $countdown),
         thirdDigit: $("[data-days] [data-third-group]", $countdown),
      };
      const $hours = {
         firstDigit: $("[data-hours] [data-first-group]", $countdown),
         secondDigit: $("[data-hours] [data-second-group]", $countdown),
      };
      const $minutes = {
         firstDigit: $("[data-minutes] [data-first-group]", $countdown),
         secondDigit: $("[data-minutes] [data-second-group]", $countdown),
      };
      const $seconds = {
         firstDigit: $("[data-seconds] [data-first-group]", $countdown),
         secondDigit: $("[data-seconds] [data-second-group]", $countdown),
      };
      const timestamp = Number($countdown?.getAttribute("data-date") ?? 0);

      const countdown = createCountdown(timestamp, {
         onTick({ days, hours, minutes, seconds }) {
            if (
               $days.firstDigit instanceof HTMLElement &&
               $days.secondDigit instanceof HTMLElement &&
               $days.thirdDigit instanceof HTMLElement
            ) {
               switch (days.length) {
                  case 3:
                     animateDigit($days.firstDigit, days[0], "day");
                     animateDigit($days.secondDigit, days[1], "day");
                     animateDigit($days.thirdDigit, days[2], "day");
                     break;
                  case 2:
                     $days.firstDigit.parentNode?.removeChild($days.firstDigit);
                     animateDigit($days.secondDigit, days[0], "day");
                     animateDigit($days.thirdDigit, days[1], "day");
                     break;
                  default:
                     $days.secondDigit.parentNode?.removeChild(
                        $days.secondDigit
                     );
                     animateDigit($days.thirdDigit, days[0], "day");
               }
            }

            if (
               $hours.firstDigit instanceof HTMLElement &&
               $hours.secondDigit instanceof HTMLElement
            ) {
               animateDigit($hours.firstDigit, hours[0], "hour");
               animateDigit($hours.secondDigit, hours[1], "hour");
            }

            if (
               $minutes.firstDigit instanceof HTMLElement &&
               $minutes.secondDigit instanceof HTMLElement
            ) {
               animateDigit($minutes.firstDigit, minutes[0], "minute");
               animateDigit($minutes.secondDigit, minutes[1], "minute");
            }

            if (
               $seconds.firstDigit instanceof HTMLElement &&
               $seconds.secondDigit instanceof HTMLElement
            ) {
               animateDigit($seconds.firstDigit, seconds[0], "second");
               animateDigit($seconds.secondDigit, seconds[1], "second");
            }
         },

         onComplete() {
            $(".countdown-text")?.remove();

            if (!$countdown) return;

            $countdown.innerHTML = "¬°La boda ha empezado! üéâ";
            $countdown.className =
               "text-primary uppercase font-semibold animate-fade-in text-3xl text-center";
         },
      });

      return countdown;
   }

   function animateDigit(group: HTMLElement, value: string, type: string) {
      const wrapper = $("[data-wrapper]", group);
      const num = $(`[data-num="${value}"]`, group);
      const xnum = $("[data-num-x0]", group); // 0 a√±adido para la animaci√≥n

      if (
         wrapper instanceof HTMLElement &&
         num instanceof HTMLElement &&
         xnum instanceof HTMLElement
      ) {
         wrapper.style.transform = `translateY(-${num.offsetTop}px)`;

         // Cuando cambie, volver arriba
         if (value === "0") {
            setTimeout(() => {
               wrapper.classList.toggle("duration-[800ms]", false);
               wrapper.classList.toggle("transition-transform", false);
               wrapper.style.transform = `translateY(-${xnum.offsetTop}px)`;
            }, 800);
         } else {
            wrapper.classList.toggle("duration-[800ms]", true);
            wrapper.classList.toggle("transition-transform", true);
         }
      }
   }

   document.addEventListener("astro:page-load", () => {
      const countdown = initCountdown();
      countdown && countdown.start();
   });
</script>

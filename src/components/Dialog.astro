---
import OrnamentDivider from "@/assets/icons/OrnamentDivider.astro";

type Props = { title: string };

const { title } = Astro.props;
---

<style>
   /* Modal animations */
   dialog {
      position: fixed;
      inset: 0;
      opacity: 0;
      scale: 0.9;

      transition:
         opacity 0.2s ease,
         scale 0.2s ease,
         display 0.3s ease allow-discrete;

      &[open] {
         opacity: 1;
         scale: 1;
         transition:
            scale 0.3s ease-in-out,
            opacity 0.3s ease;

         @starting-style {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            margin: auto;

            scale: 0.9;
            opacity: 0;
         }
      }
   }
</style>

<astro-dialog class="block">
   <!-- Modal dialog -->
   <dialog
      class="bg-primary p-6 rounded-lg shadow-lg md:min-w-96 backdrop:backdrop-blur-sm overflow-hidden z-10"
   >
      <header class="text-center text-2xl text-accent mb-4">
         <button id="closeIcon" class="absolute p-1 top-0 right-0 text-accent"
            ><svg
               xmlns="http://www.w3.org/2000/svg"
               width="24"
               height="24"
               viewBox="0 0 24 24"
               fill="none"
               stroke="currentColor"
               stroke-width="2"
               stroke-linecap="round"
               stroke-linejoin="round"
               ><path d="m15 9-6 6"></path><path d="m9 9 6 6"></path></svg
            ></button
         >

         <h2>
            {title}
         </h2>

         <div class="w-[180px] mx-auto py-2 text-accent">
            <OrnamentDivider />
         </div>
      </header>

      <div class="overflow-x-hidden overflow-y-scroll max-h-[500px]">
         <slot>
            <p class="text-gray-700 mb-4">Modal content goes here.</p>
         </slot>
      </div>
   </dialog>

   <!-- Button to open modal -->

   <div id="trigger">
      <slot name="trigger" />
   </div>
</astro-dialog>

<script>
   class AstroDialog extends HTMLElement {
      constructor() {
         super();

         const $modal = this.querySelector("dialog") as HTMLDialogElement;
         const $openBtn = this.querySelector("#trigger");
         const $closeBtn = this.querySelector("#closeIcon");

         // Open modal
         $openBtn?.addEventListener("click", () => {
            $modal.showModal();

            document.body.classList.add("overflow-hidden");
         });

         // Close modal when close button is clicked
         $closeBtn?.addEventListener("click", () => {
            closeModal($modal);
         });

         // Close modal when clicking outside the modal content
         $modal.addEventListener("click", (e) => {
            const target = e.target as HTMLElement;
            const rect = target.getBoundingClientRect();

            const clickedInDialog =
               rect.top <= e.clientY &&
               e.clientY <= rect.top + rect.height &&
               rect.left <= e.clientX &&
               e.clientX <= rect.left + rect.width;

            if (clickedInDialog === false) closeModal($modal);
         });

         function closeModal(modal: HTMLDialogElement) {
            if (!modal) return;

            modal.close();
            document.body.classList.remove("overflow-hidden");
         }
      }
   }

   customElements.define("astro-dialog", AstroDialog);
</script>
